int pylons(int k, int arr_count, int* arr) {
    int i,j,plant[arr_count],c=0,count=0,post=0,booli=0,pos1=-1,pos2=-1,pos3=-1,t=-1,ans=0;
    for(i=0;i<arr_count;i++)
    {
        plant[i]=0;
    }
    for(i=0;i<k;i++)
    {
        if(arr[i]!=0)
        {
            c=1;
            pos1=i;
        }
    }
    if(c==0)
        return -1;
    if(k>=arr_count)
        return 1;
    c=0;
    for(i=arr_count-1;i>arr_count-1-k;i--)
    {
        if(arr[i]!=0)
        {
            c=1;
            pos2=i;
        }
    }
    if(c==0)
        return -1;
    c=0;
    for(i=0;i<arr_count;i++)
    {
        if(arr[i]==0)
        {
            count++;
        }
        if(count>2*(k-1))
        {
            return -1;
        }
        if(arr[i]==1)
        {
            count=0;
        }
    }
    for(i=0;i<pos1+k;i++)
        plant[i]=1;
    for(j=pos2-k+1;j<arr_count;j++)
        plant[j]=1;
    post=2;
    for(i=pos1+k;i<pos2-k+1;i++)
    {
        if(plant[i]==0)
        {
            for(t=i;t<i+k;t++)
            {
                if(arr[t]==1)
                    pos3=t;
            }
            if(pos3==-1)
            {
                for(t=i-k+1;t<=i;t++)
                {
                    if(arr[t]==1)
                        pos3=t;
                }
            }
            for(j=pos3-k+1;j<pos3+k;j++)
                plant[j]=1;
            i=pos3+k-1;
            post++;
            pos3=-1;
        }
    }
    for(i=0;i<arr_count;i++)
    {
        if(plant[i]==0 && booli==0)
        {
            booli=2;
            post++;
            continue;
        }
        if(plant[i]==0 && booli == 2)
            continue;
        if(plant[i]==1)
            booli=0;
    }
    for(i=0;i<arr_count;i++)
    {
        //printf("%d ",plant[i]);
        if(arr[i]==1)
            ans++;
    }
    //printf("\n%d %d",ans,arr_count);
    return post;
}

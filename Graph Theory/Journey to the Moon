#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char** split_string(char*);

void dfs(int node,int n,int* visited,int** arr,long int* count,int* arindex)
{
    visited[node]=1;
    (*count)++;
    for(int i=0;i<arindex[node];i++)
    {
        if(visited[arr[node][i]]==0)
        {
            dfs(arr[node][i],n,visited,arr,count,arindex);
        }
    }
}
// Complete the journeyToMoon function below.
long int journeyToMoon(int n, int astronaut_rows, int astronaut_columns, int** astronaut) {
    if(n==1)
        return 0;
    long int ans=0;
    long int count=0;
    int i,j,index=0;
    int **arr =(int**) malloc(n*sizeof(int*));
    int* array = (int*)calloc(n,sizeof(int));
    int* visited = (int*)calloc(n,sizeof(int));
    int* arindex = (int*)calloc(n,sizeof(int));
    for(i=0;i<n;i++)
    {
        *(arr+i)=(int*)calloc(n,sizeof(int));
    }
    for(i=0;i<astronaut_rows;i++)
    {
        arr[astronaut[i][0]][arindex[astronaut[i][0]]++]=astronaut[i][1];
        arr[astronaut[i][1]][arindex[astronaut[i][1]]++]=astronaut[i][0];
    }
    for(i=0;i<n;i++)
    {
        count=0;
        if(visited[i]==0)
        {
            dfs(i,n,visited,arr,&count,arindex);
            array[index++]=count;
        }
    }
    long int sum=0;
    if(index==1)
    {
        return sum;
    }
    for(i=1;i<index;i++)
    {
        sum=sum + array[i-1];
        ans = ans + sum*array[i];
    }
    return ans;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char** np = split_string(readline());

    char* n_endptr;
    char* n_str = np[0];
    int n = strtol(n_str, &n_endptr, 10);

    if (n_endptr == n_str || *n_endptr != '\0') { exit(EXIT_FAILURE); }

    char* p_endptr;
    char* p_str = np[1];
    int p = strtol(p_str, &p_endptr, 10);

    if (p_endptr == p_str || *p_endptr != '\0') { exit(EXIT_FAILURE); }

    int** astronaut = malloc(p * sizeof(int*));

    for (int i = 0; i < p; i++) {
        *(astronaut + i) = malloc(2 * (sizeof(int)));

        char** astronaut_item_temp = split_string(readline());

        for (int j = 0; j < 2; j++) {
            char* astronaut_item_endptr;
            char* astronaut_item_str = *(astronaut_item_temp + j);
            int astronaut_item = strtol(astronaut_item_str, &astronaut_item_endptr, 10);

            if (astronaut_item_endptr == astronaut_item_str || *astronaut_item_endptr != '\0') { exit(EXIT_FAILURE); }

            *(*(astronaut + i) + j) = astronaut_item;
        }
    }

    int astronaut_rows = p;
    int astronaut_columns = 2;

    long int result = journeyToMoon(n, astronaut_rows, astronaut_columns, astronaut);

    fprintf(fptr, "%ld\n", result);

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) { break; }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') { break; }

        size_t new_length = alloc_length << 1;
        data = realloc(data, new_length);

        if (!data) { break; }

        alloc_length = new_length;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    data = realloc(data, data_length);

    return data;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");

    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        if (!splits) {
            return splits;
        }

        splits[spaces - 1] = token;

        token = strtok(NULL, " ");
    }

    return splits;
}
